<!-- -*- mode: XML -*- -->
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>


  <!-- We resume the logic in empty_world.launch -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="world_name" value="$(find kuka_robot)/worlds/kuka_table.world"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->

  <param name="robot_description" command="$(find xacro)/xacro.py $(find kuka_robot)/robot/kuka.urdf"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model kuka_robot -param robot_description -x -0.5 -z 1.02"/>

  <param name="robot_description2" command="cat $(find kuka_robot)/robot/cylinder.URDF" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner2" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model cylinder -param robot_description2 -x 0.235 -z 1.23 -Y 1.57 -R 1.5707"/>

  <!-- ### ros_control launch file ### -->
  <!-- # Joint position control # -->
  <include file="$(find kuka_launch)/launch/kuka_position_control.launch" /> 

  <!-- # or's function # -->
  <node name="kuka_or" pkg="kuka_torque_control" type="kuka_or" cwd="node" output="screen" />

</launch>


